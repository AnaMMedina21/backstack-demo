apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: clusterapp-pythonic
spec:
  compositeTypeRef:
    apiVersion: example.clustered.crossplane.io/v1
    kind: ClusterApp
  mode: Pipeline
  pipeline:
  - step: create-deployment-and-service
    functionRef:
      name: function-pythonic
    input:
      apiVersion: pythonic.fn.fortra.com/v1alpha1
      kind: Composite
      composite: |
        class Composite(BaseComposite):
          def compose(self):
            labels = {'example.crossplane.io/app': self.metadata.name}

            d = self.resources.deployment('apps/v1', 'Deployment')
            d.metadata.labels = labels
            d.metadata.namespace = self.spec.namespace
            d.spec.replicas = 2
            d.spec.selector.matchLabels = labels
            d.spec.template.metadata.labels = labels
            d.spec.template.spec.containers[0].name = 'app'
            d.spec.template.spec.containers[0].image = self.spec.image
            d.spec.template.spec.containers[0].ports[0].containerPort = 80
            d.ready = d.conditions.Available.status

            s = self.resources.service('v1', 'Service')
            s.metadata.labels = labels
            s.metadata.namespace = self.spec.namespace
            s.spec.selector = labels
            s.spec.ports[0].protocol = 'TCP'
            s.spec.ports[0].port = 8080
            s.spec.ports[0].targetPort = 80
            s.ready = s.observed.spec.clusterIP

            self.status.replicas = d.status.availableReplicas
            self.status.address = s.observed.spec.clusterIP